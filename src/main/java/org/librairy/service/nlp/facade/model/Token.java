/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.librairy.service.nlp.facade.model;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Token extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Token\",\"namespace\":\"org.librairy.service.nlp.facade.model\",\"fields\":[{\"name\":\"target\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"lemma\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"pos\",\"type\":{\"type\":\"enum\",\"name\":\"PoS\",\"symbols\":[\"NOUN\",\"VERB\",\"ADJECTIVE\",\"ADVERB\",\"PRONOUN\",\"PREPOSITION\",\"CONJUNCTION\",\"INTERJECTION\",\"ARTICLE\"]}},{\"name\":\"freq\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.lang.String target;
   private java.lang.String lemma;
   private org.librairy.service.nlp.facade.model.PoS pos;
   private long freq;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Token() {}

  /**
   * All-args constructor.
   */
  public Token(java.lang.String target, java.lang.String lemma, org.librairy.service.nlp.facade.model.PoS pos, java.lang.Long freq) {
    this.target = target;
    this.lemma = lemma;
    this.pos = pos;
    this.freq = freq;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return target;
    case 1: return lemma;
    case 2: return pos;
    case 3: return freq;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: target = (java.lang.String)value$; break;
    case 1: lemma = (java.lang.String)value$; break;
    case 2: pos = (org.librairy.service.nlp.facade.model.PoS)value$; break;
    case 3: freq = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'target' field.
   */
  public java.lang.String getTarget() {
    return target;
  }

  /**
   * Sets the value of the 'target' field.
   * @param value the value to set.
   */
  public void setTarget(java.lang.String value) {
    this.target = value;
  }

  /**
   * Gets the value of the 'lemma' field.
   */
  public java.lang.String getLemma() {
    return lemma;
  }

  /**
   * Sets the value of the 'lemma' field.
   * @param value the value to set.
   */
  public void setLemma(java.lang.String value) {
    this.lemma = value;
  }

  /**
   * Gets the value of the 'pos' field.
   */
  public org.librairy.service.nlp.facade.model.PoS getPos() {
    return pos;
  }

  /**
   * Sets the value of the 'pos' field.
   * @param value the value to set.
   */
  public void setPos(org.librairy.service.nlp.facade.model.PoS value) {
    this.pos = value;
  }

  /**
   * Gets the value of the 'freq' field.
   */
  public java.lang.Long getFreq() {
    return freq;
  }

  /**
   * Sets the value of the 'freq' field.
   * @param value the value to set.
   */
  public void setFreq(java.lang.Long value) {
    this.freq = value;
  }

  /** Creates a new Token RecordBuilder */
  public static org.librairy.service.nlp.facade.model.Token.Builder newBuilder() {
    return new org.librairy.service.nlp.facade.model.Token.Builder();
  }
  
  /** Creates a new Token RecordBuilder by copying an existing Builder */
  public static org.librairy.service.nlp.facade.model.Token.Builder newBuilder(org.librairy.service.nlp.facade.model.Token.Builder other) {
    return new org.librairy.service.nlp.facade.model.Token.Builder(other);
  }
  
  /** Creates a new Token RecordBuilder by copying an existing Token instance */
  public static org.librairy.service.nlp.facade.model.Token.Builder newBuilder(org.librairy.service.nlp.facade.model.Token other) {
    return new org.librairy.service.nlp.facade.model.Token.Builder(other);
  }
  
  /**
   * RecordBuilder for Token instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Token>
    implements org.apache.avro.data.RecordBuilder<Token> {

    private java.lang.String target;
    private java.lang.String lemma;
    private org.librairy.service.nlp.facade.model.PoS pos;
    private long freq;

    /** Creates a new Builder */
    private Builder() {
      super(org.librairy.service.nlp.facade.model.Token.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.librairy.service.nlp.facade.model.Token.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.target)) {
        this.target = data().deepCopy(fields()[0].schema(), other.target);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lemma)) {
        this.lemma = data().deepCopy(fields()[1].schema(), other.lemma);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.pos)) {
        this.pos = data().deepCopy(fields()[2].schema(), other.pos);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.freq)) {
        this.freq = data().deepCopy(fields()[3].schema(), other.freq);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Token instance */
    private Builder(org.librairy.service.nlp.facade.model.Token other) {
            super(org.librairy.service.nlp.facade.model.Token.SCHEMA$);
      if (isValidValue(fields()[0], other.target)) {
        this.target = data().deepCopy(fields()[0].schema(), other.target);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lemma)) {
        this.lemma = data().deepCopy(fields()[1].schema(), other.lemma);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.pos)) {
        this.pos = data().deepCopy(fields()[2].schema(), other.pos);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.freq)) {
        this.freq = data().deepCopy(fields()[3].schema(), other.freq);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'target' field */
    public java.lang.String getTarget() {
      return target;
    }
    
    /** Sets the value of the 'target' field */
    public org.librairy.service.nlp.facade.model.Token.Builder setTarget(java.lang.String value) {
      validate(fields()[0], value);
      this.target = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'target' field has been set */
    public boolean hasTarget() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'target' field */
    public org.librairy.service.nlp.facade.model.Token.Builder clearTarget() {
      target = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'lemma' field */
    public java.lang.String getLemma() {
      return lemma;
    }
    
    /** Sets the value of the 'lemma' field */
    public org.librairy.service.nlp.facade.model.Token.Builder setLemma(java.lang.String value) {
      validate(fields()[1], value);
      this.lemma = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'lemma' field has been set */
    public boolean hasLemma() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'lemma' field */
    public org.librairy.service.nlp.facade.model.Token.Builder clearLemma() {
      lemma = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'pos' field */
    public org.librairy.service.nlp.facade.model.PoS getPos() {
      return pos;
    }
    
    /** Sets the value of the 'pos' field */
    public org.librairy.service.nlp.facade.model.Token.Builder setPos(org.librairy.service.nlp.facade.model.PoS value) {
      validate(fields()[2], value);
      this.pos = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'pos' field has been set */
    public boolean hasPos() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'pos' field */
    public org.librairy.service.nlp.facade.model.Token.Builder clearPos() {
      pos = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'freq' field */
    public java.lang.Long getFreq() {
      return freq;
    }
    
    /** Sets the value of the 'freq' field */
    public org.librairy.service.nlp.facade.model.Token.Builder setFreq(long value) {
      validate(fields()[3], value);
      this.freq = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'freq' field has been set */
    public boolean hasFreq() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'freq' field */
    public org.librairy.service.nlp.facade.model.Token.Builder clearFreq() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Token build() {
      try {
        Token record = new Token();
        record.target = fieldSetFlags()[0] ? this.target : (java.lang.String) defaultValue(fields()[0]);
        record.lemma = fieldSetFlags()[1] ? this.lemma : (java.lang.String) defaultValue(fields()[1]);
        record.pos = fieldSetFlags()[2] ? this.pos : (org.librairy.service.nlp.facade.model.PoS) defaultValue(fields()[2]);
        record.freq = fieldSetFlags()[3] ? this.freq : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
